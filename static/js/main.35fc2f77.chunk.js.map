{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/helper.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","checkIfUrl","url","test","TextField","required","onChange","props","useState","touched","setTouched","urlError","setUrlError","name","label","value","id","hasError","isUrlInput","htmlFor","classNames","e","onBlur","initialFormValues","NewMovie","onAdd","formValues","setFormValues","count","setCount","target","prevState","isDisabled","onSubmit","preventDefault","Object","keys","input","splitedName","split","restIsUppercased","forEach","char","toUpperCase","slice","prepareLabel","isRequired","Math","random","toString","placeholder","type","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35fc2f77.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img src={movie.imgUrl} alt=\"Film logo\" />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img src=\"images/imdb-logo.jpeg\" alt=\"imdb\" />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} movie={movie} />\n    ))}\n  </div>\n);\n","export const getRandomDigits = () => Math.random().toString().slice(2);\n\nexport const checkIfUrl = (url: string) => {\n  const pattern\n    // eslint-disable-next-line max-len\n    = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return pattern.test(url);\n};\n\nexport const prepareLabel = (name: string) => {\n  const splitedName = name.split('');\n  let label = '';\n  let restIsUppercased = false;\n\n  splitedName.forEach(char => {\n    if (char.toUpperCase() === char) {\n      label += ` ${char.toUpperCase()}`;\n      restIsUppercased = true;\n    } else if (restIsUppercased) {\n      label += char.toUpperCase();\n    } else {\n      label += char;\n    }\n  });\n\n  return `${label[0].toUpperCase()}${label.slice(1)}`;\n};\n","import classNames from 'classnames';\nimport React, { useState, HTMLProps } from 'react';\nimport { checkIfUrl } from '../../utils/helper';\n\nexport const TextField: React.FC<HTMLProps<HTMLInputElement>> = ({\n  required = false,\n  onChange = () => {},\n  ...props\n}) => {\n  const [touched, setTouched] = useState(false);\n  const [urlError, setUrlError] = useState(false);\n\n  const {\n    name,\n    label,\n    value,\n    id,\n  } = props;\n\n  const hasError = touched && required && !value;\n  const isUrlInput = name === 'imdbUrl' || name === 'imgUrl';\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          onChange={(e) => {\n            onChange(e);\n            setUrlError(false);\n          }}\n          onBlur={() => {\n            if (value && isUrlInput) {\n              setUrlError(!checkIfUrl(value as string));\n            }\n\n            setTouched(true);\n          }}\n          {...props}\n        />\n      </div>\n\n      {hasError && <p className=\"help is-danger\">{`${label} is required`}</p>}\n\n      {urlError && (\n        <p className=\"help is-danger\">You should input proper URL</p>\n      )}\n    </div>\n  );\n};\n","import { ChangeEvent, FormEventHandler, useState } from 'react';\n\nimport { TextField } from '../TextField';\nimport { checkIfUrl, getRandomDigits, prepareLabel } from '../../utils/helper';\n\nimport { Movie } from '../../types/Movie';\n\ntype NewMovieProps = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst initialFormValues: Movie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie = ({ onAdd }: NewMovieProps) => {\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [count, setCount] = useState(0);\n\n  const {\n    title, imdbId, imdbUrl, imgUrl,\n  } = formValues;\n\n  const onChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = target;\n\n    setFormValues((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const onSubmit: FormEventHandler = (e) => {\n    e.preventDefault();\n\n    onAdd(formValues);\n\n    setFormValues(initialFormValues);\n    setCount((prevState) => prevState + 1);\n  };\n\n  const isDisabled = !title\n    || !imdbId\n    || !imdbUrl\n    || !imgUrl\n    || !checkIfUrl(imdbUrl)\n    || !checkIfUrl(imdbUrl);\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={onSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      {\n        Object.keys(initialFormValues).map(input => {\n          const label = prepareLabel(input);\n          const isRequired = input !== 'description';\n\n          return (\n            <TextField\n              key={input}\n              id={`${input}-${getRandomDigits()}`}\n              name={input}\n              label={label}\n              placeholder={`Enter ${label}`}\n              value={formValues[input as keyof Movie]}\n              onChange={onChange}\n              required={isRequired}\n            />\n          );\n        })\n      }\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport './App.scss';\n\nimport { Movie } from './types/Movie';\n\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setMovies((prevState) => [...prevState, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}